dijkstra普通版
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int N=510,M=100010;
int g[N][N],n,m,dist[N];
bool st[N];
int dijkstra(){
    memset(dist,0x3f,sizeof dist);
    dist[1]=0;
    for(int i=1;i<=n;i++){
        int t=-1;
        for(int j=1;j<=n;j++)
            if(!st[j] && (t==-1||dist[j]<dist[t])) t=j;//找距离上一出发点最近的点
        
        st[t]=1;//标记
        for(int j=1;j<=n;j++)
            dist[j]=min(dist[j],dist[t]+g[t][j]);//改变各个点的距离
    }
    if(dist[n]==0x3f3f3f3f)  return -1;
    return dist[n];
}

int main(void){
    memset(g,0x3f,sizeof g);
    int x,y,z;
    scanf("%d%d",&n,&m);
    for(int i=0;i<m;i++){
        scanf("%d%d%d",&x,&y,&z);
        g[x][y]=min(g[x][y],z);//邻接矩阵建图法
    }
    
    int ret=dijkstra();
    cout<<ret<<endl;
    return 0;
}

堆优化版//没看懂
#include<cstring>
#include<iostream>
#include<queue>

#define x first
#define y second

using namespace std;
const int N=150010,INF=0x3f3f3f3f;
typedef pair<int,int> PII;
int h[N],e[N],w[N],ne[N],idx;
int n,m;
int d[N];
bool st[N];

void add(int a,int b,int c){//邻接表建图法
    e[idx]=b,w[idx]=c,ne[idx]=h[a],h[a]=idx++;
}

void dijkstra(void){
    memset(d,0x3f,sizeof d);
    priority_queue<PII,vector<PII>,greater<PII>> q;//小跟堆
    
    d[1]=0;
    q.push({0,1});
    
    while(q.size()){
        PII t=q.top();
        q.pop();
        
        if(st[t.y]) continue;
        st[t.y]=1;
        
        for(int i=h[t.y];~i;i=ne[i]){
            int j=e[i];
            if(d[j]>d[t.y]+w[i]){
                d[j]=d[t.y]+w[i];
                q.push({d[j],j});
            }
        }
    }
    
}

int main(void){
    memset(h,-1,sizeof h);
    scanf("%d%d",&n,&m);
    
    int a,b,c;
    while(m--){
        scanf("%d%d%d",&a,&b,&c);
        add(a,b,c);
    }
    
    dijkstra();
    
    if(d[n]!=INF) cout<<d[n];
    else cout<<-1;
    
    return 0;
}

spfa://单源最短路问题
#include<iostream>
#include<cstring>

using namespace std;
const int N=100010,INF=0x3f3f3f3f;
int h[N],e[N],w[N],ne[N],idx;
int d[N],q[N];

bool st[N];
int n,m;

void add(int a,int b,int c){//邻接表建图法
    e[idx]=b,w[idx]=c,ne[idx]=h[a],h[a]=idx++;
}

void spfa(void){
    memset(d,0x3f,sizeof d);
    d[1]=0;
    
    int hh=0,tt=1;
    q[0]=1;
    
    while(hh!=tt){
        int t=q[hh++];
        if(hh==N) hh=0;
        st[t]=0;
        
        for(int i=h[t];~i;i=ne[i]){
            int j=e[i];
            if(d[j]>d[t]+w[i]){
                d[j]=d[t]+w[i];
                if(!st[j]){
                    q[tt++]=j;
                    if(tt==N) tt=0;
                    st[j]=1;
                }
            }
        }
    }
}

int main(void){
    memset(h,-1,sizeof h);
    scanf("%d%d",&n,&m);
    
    int a,b,c;
    while(m--){
        scanf("%d%d%d",&a,&b,&c);
        add(a,b,c);
    }
    
    spfa();
    
    if(d[n]!=INF) cout<<d[n];
    else cout<<"impossible";
    
    return 0;
}