求解边权相同的最短路算法：（一本通广搜1255）
#include<iostream>
#include<cstring>

#define x first
#define y second

using namespace std;
typedef pair<int,int> PII; 
const int N=110;
int g[N][N];
int d[N][N];
PII q[N],pre[N][N];
int hh,tt=-1;

const int dx[]={-1,0,+1,0},dy[]={0,+1,0,-1};

bool bfs(){
	memset(d,-1,sizeof d);
	d[4][4]=0;
	q[++tt]={4,4};
	
	while(hh<=tt){
		PII t=q[hh++];
		
		for(int i=0;i<4;i++){
			int a=t.x+dx[i],b=t.y+dy[i];
			if(a<0 || a>=5 || b<0 || b>=5)	continue;
			if(d[a][b]!=-1 || g[a][b])	continue;
			
			d[a][b]=d[t.x][t.y]+1;
			pre[a][b]={t.x,t.y};
			q[++tt]={a,b};
			if(!a && !b) return 1;
		}
	}
	return 0;
}

int main(void){
	for(int i=0;i<5;i++)
		for(int j=0;j<5;j++)
			scanf("%d",&g[i][j]);
	
	bfs();
	
	PII end={0,0};
	while(end.x!=4 || end.y!=4) {
		printf("(%d, %d)\n",end.x,end.y);
		end=pre[end.x][end.y];
	}
	printf("(%d, %d)\n",end.x,end.y);
	return 0;
}



floyd算法：
//dfs:优点：代码短，所占的空间小,状态定义比较灵活    缺点:不直观,难调试
//bfs优点：可以求解边权相等的最短路问题   缺点 
//O(n)
//多源多汇最短路->floyd算法
// 
const int N=110;
int d[N][N];
int n,m;
//
//int h[N],w[M],e[M],ne[M],idx;
//void add(int a,int b,int c){
//	e[idx]=b,w[idx]=c,ne[idx]=h[a],h[a]=idx++;
//}/添加一条a->b的长度为c的边 
//邻接表建图
 
int main(void){
	scanf("%d%d",&n,&m);
	memset(d,0x3f,sizeof d);
	for(int i=1;i<=n;i++) d[i][i]=0;
	
	int a,b,c;
	while(m--){
		scanf("%d%d%d",&a,&b,&c);
		d[a][b]=d[b][a]=min(d[a][b],c);
	}
	
	//floyd
	for(int k=1;k<=n;k++)
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++)
				d[i][j]=min(d[i][j],d[i][k]+d[k][j]);
	
	//d[i][j]存的就是i-j之间的最短路的大小 
	 
} 
 